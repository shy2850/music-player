import Immutable from"./immutable.js";import React from"./react.js";const EF=(e,t)=>({});let store=Immutable.fromJS({}),updateQueue=[];export const init=(e={})=>{store=Immutable.fromJS(e)};export const getState=()=>store;export const compose=(...e)=>{if(0===e.length)return e=>e;{const t=e[e.length-1],o=e.slice(0,-1);return(...e)=>o.reduceRight((e,t)=>t(e),t(...e))}};export const dispatch=function(e){let t=e(store);t!==store&&(store=t,updateQueue.map(e=>e()))};export const isSameObject=(e,t)=>{let o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&(o.length+s.length===0||!o.find(o=>e[o]!==t[o]))};export const connect=(e=EF,t=EF)=>o=>(class extends React.Component{execProps(){const{props:o}=this,s=e(getState,o),r=t(dispatch,s);return Object.assign({},o,s,r)}constructor(e){super(e);let t=this;t.execProps=t.execProps.bind(t),t.tempProps=t.execProps(),t.tempUpdate=function(){let e=t.execProps();isSameObject(t.tempProps,e)||(t.tempProps=e,t.forceUpdate&&t.forceUpdate())},updateQueue.push(t.tempUpdate)}componentWillUnmount(){updateQueue.splice(updateQueue.indexOf(this.tempUpdate),1)}render(){return React.createElement(o,Object.assign({},this.tempProps))}});